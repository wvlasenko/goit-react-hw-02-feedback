{"version":3,"sources":["components/Statistics/Statistics.js","components/Notification/Notification.js","components/FeebackOptions/FeedackOtions.js","components/Section.js","App.js","reportWebVitals.js","index.js","components/FeebackOptions/FeedbackOptions.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Noitfication","massage","porpTypes","massega","Proptypes","string","isRequired","FeedbackOptions","options","onLeaveFeedback","arrOfOptions","Object","keys","map","option","type","className","FeedbackOptionsStl","button","onClick","v4","Section","title","children","App","state","updateProp","setState","prevStat","countTotalFeedback","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","this","Notification","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"qQA2BeA,MAzBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC7C,OACI,qCACI,+BACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,QAGb,gCACI,wCAAWC,KACV,oDAAuBC,EAAqB,c,gBCX7D,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACpB,OAAO,4BAAIA,IAGfD,EAAaE,UAAY,CACrBC,QAASC,IAAUC,OAAOC,YAGfN,Q,wBCwBAO,MA9Bf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC1BC,EAAeC,OAAOC,KAAKJ,GAEjC,OACI,8BACKE,EAAaG,KAAI,SAAAC,GAAM,OACpB,wBACIC,KAAK,SAELC,UAAWC,IAAmBC,OAC9BC,QAAS,WACLV,EAAgBK,IALxB,SAQKA,GANIM,qBCIVC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtB,OACI,oCACI,6BAAKD,IACJC,MCCQC,E,4MACjBC,MAAQ,CACJ9B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAET6B,WAAa,SAAAX,GACT,EAAKY,UAAS,SAAAC,GACV,OAAO,eACFb,EAAOa,EAASb,GAAQ,O,EAKrCW,WAAa,SAAAX,GACT,EAAKY,UAAS,SAAAC,GACV,OAAO,eACFb,EAAOa,EAASb,GAAQ,O,EAKrCc,mBAAqB,WACjB,OAAOlB,OAAOmB,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAGzEC,gCAAkC,WAAO,IAC7BvC,EAAS,EAAK8B,MAAd9B,KAIR,OAFcwC,KAAKC,MAAOzC,EAAO,EAAKkC,qBAAwB,M,uDAIxD,IAAD,EAC0BQ,KAAKZ,MAA5B9B,EADH,EACGA,KAAMC,EADT,EACSA,QAASC,EADlB,EACkBA,IACjBC,EAAQuC,KAAKR,qBACnB,OACI,qCACI,cAAC,EAAD,CAASP,MAAM,wBAAf,SACI,cAAC,EAAD,CACId,QAAS6B,KAAKZ,MACdhB,gBAAiB4B,KAAKX,eAInB,IAAV5B,EACG,cAACwC,EAAD,CAAcrC,QAAS,sBAEvB,cAAC,EAAD,CAASqB,MAAM,aAAf,SACI,cAAC,EAAD,CACI3B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOuC,KAAKR,qBACZ9B,mBAAoBsC,KAAKH,6C,GAtDpBK,aCOlBC,EAdS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,mC","file":"static/js/main.9d71e43d.chunk.js","sourcesContent":["import Proptypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n    return (\n        <>\n            <ul>\n                <li>Good:{good}</li>\n                <li>Neutral:{neutral}</li>\n                <li>Bad:{bad}</li>\n            </ul>\n\n            <div>\n                <p>Total: {total}</p>\n                {<p>Positive feedback: {positivePercentage + '%'}</p>}\n            </div>\n        </>\n    );\n}\n\nStatistics.propTypes = {\n    good: Proptypes.number.isRequired,\n    neutral: Proptypes.number.isRequired,\n    bad: Proptypes.number.isRequired,\n    total: Proptypes.number.isRequired,\n    positivePercentage: Proptypes.number.isRequired,\n};\n\nexport default Statistics;\n","import Proptypes from 'prop-types';\n\nfunction Noitfication({ massage }) {\n    return <p>{massage}</p>;\n}\n\nNoitfication.porpTypes = {\n    massega: Proptypes.string.isRequired,\n};\n\nexport default Noitfication;\n","import { v4 } from 'uuid';\nimport Proptypes from 'prop-types';\nimport FeedbackOptionsStl from './FeedbackOptions.module.css';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n    const arrOfOptions = Object.keys(options);\n\n    return (\n        <div>\n            {arrOfOptions.map(option => (\n                <button\n                    type=\"button\"\n                    key={v4()}\n                    className={FeedbackOptionsStl.button}\n                    onClick={() => {\n                        onLeaveFeedback(option);\n                    }}\n                >\n                    {option}\n                </button>\n            ))}\n        </div>\n    );\n}\n\nFeedbackOptions.propTypes = {\n    option: Proptypes.exact({\n        good: Proptypes.number.isRequired,\n        neutral: Proptypes.number.isRequired,\n        bad: Proptypes.number.isRequired,\n    }),\n    onLeaveFeedback: Proptypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import Proptypes from 'prop-types';\n\nfunction Section({ title, children }) {\n    return (\n        <section>\n            <h2>{title}</h2>\n            {children}\n        </section>\n    );\n}\n\nSection.propTypes = {\n    title: Proptypes.string.isRequired,\n    children: Proptypes.node.isRequired,\n};\n\nexport default Section;\n","import { Component } from 'react';\nimport './App.css';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\nimport FeedbackOptions from './components/FeebackOptions/FeedackOtions';\nimport Section from './components/Section';\n\nexport default class App extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n    updateProp = type => {\n        this.setState(prevStat => {\n            return {\n                [type]: prevStat[type] + 1,\n            };\n        });\n    };\n\n    updateProp = type => {\n        this.setState(prevStat => {\n            return {\n                [type]: prevStat[type] + 1,\n            };\n        });\n    };\n\n    countTotalFeedback = () => {\n        return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n    };\n\n    countPositiveFeedbackPercentage = () => {\n        const { good } = this.state;\n\n        const ratio = Math.round((good / this.countTotalFeedback()) * 100);\n\n        return ratio;\n    };\n    render() {\n        const { good, neutral, bad } = this.state;\n        const total = this.countTotalFeedback();\n        return (\n            <>\n                <Section title=\"Please leave feedback\">\n                    <FeedbackOptions\n                        options={this.state}\n                        onLeaveFeedback={this.updateProp}\n                    />\n                </Section>\n\n                {total === 0 ? (\n                    <Notification massage={'No feedback given'} />\n                ) : (\n                    <Section title=\"Statistics\">\n                        <Statistics\n                            good={good}\n                            neutral={neutral}\n                            bad={bad}\n                            total={this.countTotalFeedback()}\n                            positivePercentage={this.countPositiveFeedbackPercentage()}\n                        />\n                    </Section>\n                )}\n            </>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2umdX\"};"],"sourceRoot":""}